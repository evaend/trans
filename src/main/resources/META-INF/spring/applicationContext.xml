<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd ">
	
	<context:spring-configured />
	<!-- 引入dbconfig.properties属性文件 -->
	<context:property-placeholder location="classpath:META-INF/spring/*.properties" />

	<!-- 配置数据源 使用的是Druid数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${database.driverClassName}"/>
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />

		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 7200秒，也就是120分钟 -->
		<property name="removeAbandonedTimeout" value="7200" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="validateExistingTransaction" value="true"/>
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"  rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED"  rollback-for="java.lang.Exception"/>
			<tx:method name="save*" propagation="REQUIRED"  rollback-for="java.lang.Exception"/>
			<tx:method name="bund*" propagation="REQUIRED"  rollback-for="java.lang.Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="submit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="change*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="transfer*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="import*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="commonSyncDataAuto4Loopstep" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="commonSyncDataToLocal4Loopstep" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="*SpGetBill" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>

			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="sync*" propagation="SUPPORTS" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- Spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.erp.trans..service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- mybatis加载映射配置文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">
			<array>
				<bean class="com.erp.trans.common.interceptor.PaginateInterceptor" />
				<bean class="com.erp.trans.common.interceptor.BaseSqlInterceptor"/>
			</array>
		</property>
		<property name="configLocation" value="classpath:META-INF/spring/mybatis-configuration.xml"></property>
		<property name="mapperLocations" value="classpath*:META-INF/mapping/*.xml" />
	</bean>
	<!-- mybatis加载Dao组件: basePackage针对各自项目有所不同，需具体配置 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer" abstract="true">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
   <!-- mybatis加载Dao组件 -->
	<bean parent="mapperScannerConfigurer">
		<property name="basePackage" value="com.erp.trans.dao,com.erp.trans.common.dao"/>
	</bean>
	<!-- Spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.erp.trans.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>	
	
</beans>